
@import "./mixins/animation";
@use "sass:map";
@mixin mq($width, $type: max) {
    @if map_has_key($breakpoints, $width){
        $width: map_get($breakpoints, $width);
    }

    @if $type == max {
        $width: $width + 1px;
    }

    @media only screen and (#{$type}-width: $width){
        @content;
    }

}
@mixin font-size($max-font-size, $min-font-size, $max-vw, $min-vw) {
    $u1: unit($min-vw);
    $u2: unit($max-vw);
    $u3: unit($min-font-size);
    $u4: unit($max-font-size);
  
    @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
      & {
        font-size: $min-font-size;
        @media screen and (min-width: $min-vw) {
          font-size: calc(
            #{$min-font-size} * var(--font-resizer) + #{strip-unit(
                $max-font-size - $min-font-size
              )} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)})
          );
        }
        @media screen and (min-width: $max-vw) {
          font-size: $max-font-size;
        }
      }
    }
}
@mixin invert-color {
  -webkit-filter: invert(100%);
  filter: invert(100%);
  background-color: #000;
}
@mixin dark-mode {
  
}


@mixin fluid-type-customized($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      @media screen and (min-width: $min-vw) and (max-width: $max-vw) {
        font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }
    }
  }
}

/*hover effect*/

@mixin hover-effect($baseColor, $hoverColor) {
  background: linear-gradient(to left, $baseColor 50%, $hoverColor 50%) right;
  transition: .25s ease-out;
  background-size: 200%;
}

@mixin ar-hover-effect ($baseColor, $hoverColor) {
  background: linear-gradient(to right, $baseColor 50%, $hoverColor 50%) left;
  transition: .25s ease-out;
  background-size: 200%;
}
/*hover effect*/

@mixin selected($backgroundColor, $textColor) {
  background-color: $backgroundColor;
  color: $textColor;
}

@mixin define-responsive-property($property , $xLarge ,  $desktop , $tablet , $mobile){
    #{$property}: #{$xLarge};
    @include property-max-breakPoint( $property, $desktop , 1366px );
    @include property-max-breakPoint( $property, $tablet , 768px );
    @include property-max-breakPoint( $property, $mobile , 767px );
}

@mixin property-max-breakPoint( $property , $value , $max-screen ){
  @if($property and $value and $max-screen ){
    @media screen and (max-width: $max-screen ) {
        #{$property}: #{$value};
    }
  }
}
@mixin property-min-breakPoint( $property , $value , $min-screen ){
  @if($property and $value and $max-screen ){
  @media screen and (min-width: $min-screen ) {
      #{$property}: #{$value};
  }
}
}

@function checkThemeSetKeys($theme){
  @if(
    map-has-key($theme, "primary") != null &&
    map-has-key($theme, "primary-bg") != null &&
    map-has-key($theme, "primary-color") != null  &&
    map-has-key($theme, "secondary-bg") != null &&
    map-has-key($theme, "secondary-color") != null  &&
  ){
    @return true;
  }
  @return false;
}
@mixin add-site-themes-colors($light-colors , $dark-colors) {
  @if (checkThemeSetKey($light-colors) && checkThemeSetKey($dark-colors)){
    :root{
      --primary : #{map-get($map: $light-colors, $key: "primary")};
      --primary-bg : #{map-get($map: $light-colors, $key: "primary-bg")};
      --primary-color : #{map-get($map: $light-colors, $key: "primary-color")}; 
      --secondary-bg : #{map-get($map: $light-colors, $key: "secondary-bg")};
      --secondary-color : #{map-get($map: $light-colors, $key: "secondary-color")}; 
    }
    .invert-color{
      --primary : #{map-get($map: $dark-colors, $key: "primary")};
      --primary-bg : #{map-get($map: $dark-colors, $key: "primary-bg")};
      --primary-color : #{map-get($map: $dark-colors, $key: "primary-color")}; 
      --secondary-bg : #{map-get($map: $dark-colors, $key: "secondary-bg")};
      --secondary-color : #{map-get($map: $dark-colors, $key: "secondary-color")}; 
    }
  }
}

@mixin add-theme-colors( $colorName , $lightColor , $darkColor  ) {
      @at-root :root &{
        #{$colorName} : #{$lightColor};
    }
    @at-root .invert-color &{
        #{$colorName} : #{$darkColor};
    }
}