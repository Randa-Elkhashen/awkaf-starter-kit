/* css variables*/
.td-generic-timeline-wrapper{
  --timeline-spacer : grey;
  --timeline-highlight : #F16100;
  --timeline-color : black;
}
.invert-color{
  .td-generic-timeline-wrapper{
    --timeline-spacer : white;
    --timeline-highlight : #F16100;
    --timeline-color : white;
  }
}
/* css variables*/
/* timeline variables starts*/
$highlightColor : var(--timeline-highlight);
$timelineColor : var(--timeline-color);
$mobileRowWidth: 90%;
$titlePosition: (100% - $mobileRowWidth)/2;
$spacerColor: var(--timeline-spacer);
$cardsColumnsCenterPadding: 30px;
$TimeLinebreakpoints: (
  "sm": (
    min-width: 320px,
  ),
  "md": (
    min-width: 768px,
  ),
  "lg": (
    min-width: 1024px,
  ),
  "xl": (
    min-width: 1366px,
  ),
  "xxl": (
    min-width: 1920px,
  ),
) !default;
/* timeline variables ends*/

/* timeline mixins starts*/
@mixin respond-to($breakpoint) {
  @if map-has-key($TimeLinebreakpoints, $breakpoint) {
    // Prints a media query based on the value
    @media screen and #{inspect(map-get($TimeLinebreakpoints, $breakpoint))} {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
            + "Available breakpoints are: #{map-keys($TimeLinebreakpoints)}.";
  }
}
@mixin addTimelineCenterLine {
  position: relative;
  &::before {
    display: inline-block;
    content: "";
    position: absolute;
    height: 100%;
    #{$start}: 50%;
    top: 0;
    transform: translate(-50%, 0);
    border-#{$start}: 1px solid $spacerColor;
    @media screen and (max-width: 767px) {
      #{$start}: 0;
    }
  }
}
@mixin addTimeLineNode {
  position: absolute;
  width: 30px;
  height: 30px;
  background-color: $spacerColor;
  background-clip: content-box;
  border: 10px solid transparent;
  display: inline-block;
  border-radius: 50%;
  #{$start}: 50%;
  transition: 0.5s ease-in-out;
  transform: translate(-50%, 0);
  @media screen and (max-width: 767px) {
    #{$start}: 0;
    transform: translate(-50%, 0);
  }
}
@mixin addHighlightedNode {
  background-color: white;
  border: 10px solid $highlightColor;
}
/* timeline mixins ends*/
/**/
 /* generic */
 $position :1;
 @if $direction == "rtl"{
 $position : -1;
 }
 @mixin fluid-type-customized($min-vw, $max-vw, $min-font-size, $max-font-size) {
   $u1: unit($min-vw);
   $u2: unit($max-vw);
   $u3: unit($min-font-size);
   $u4: unit($max-font-size);
 
   @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
     & {
       @media screen and (min-width: $min-vw) and (max-width: $max-vw) {
         font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
       }
     }
   }
 }
 @mixin define-responsive-property($property , $xLarge ,  $desktop , $tablet , $mobile){
   #{$property}: #{$xLarge};
   @include property-max-breakPoint( $property, $desktop , 1366px );
   @include property-max-breakPoint( $property, $tablet , 1024px );
   @include property-max-breakPoint( $property, $mobile , 767px );
 }
 @mixin property-max-breakPoint( $property , $value , $max-screen ){
   @if($property and $value and $max-screen ){
     @media screen and (max-width: $max-screen ) {
         #{$property}: #{$value};
     }
   }
 }
 @mixin property-min-breakPoint( $property , $value , $min-screen ){
   @if($property and $value and $max-screen ){
   @media screen and (min-width: $min-screen ) {
       #{$property}: #{$value};
   }
 }
 }
 @mixin gallery-title($font-size) {
     transition: 0.5s ease-in-out;
     font-size: calc( var(--fontModifier) * #{$font-size});
      margin-bottom: 0.45em;
  }
 @mixin gallery-highlight-title($font-size , $highlightColor) {
     color: $highlightColor;
    line-height: 0.45;
    @include define-responsive-property('font-size' , calc( var(--fontModifier) * #{$font-size} ) ,
    calc( var(--fontModifier) * #{$font-size} ) ,  calc( var(--fontModifier) * #{$font-size} * 0.5 ) ,
    calc( var(--fontModifier) * #{$font-size} * 0.5 )
    );
   @include property-max-breakPoint( 'line-height', 1 , 1024px );
 }
 @mixin max-linex($lines) {
     display: -webkit-box;
     -webkit-line-clamp: $lines;
     -webkit-box-orient: vertical;  
     overflow: hidden;
 }
/**/
.td-generic-timeline-wrapper {
  padding-top: 12px;
  &.td-generic-timeline-wrapper--type2 {
    overflow: hidden;
    .td-generic-timeline-wrapper__spacer {
      @include addTimelineCenterLine();
      @media screen and (max-width: 767px) {
        margin-#{$start}: 12px;
      }
    }
    .td-generic-timeline {
      margin-bottom: 4px;
      .td-generic-timeline__row {
        margin-bottom: 30px;
        position: relative;
        &[data-aos="highlight"]{
          &.aos-animate{
              .td-generic-timeline__row__node{
                @include addHighlightedNode();
              }
              .td-generic-timeline__row__card{
                .td-generic-timeline__row__card__article{
                  h1{
                    @include gallery-highlight-title( 60px  , $highlightColor);
                  }
                }

              }
              .timeline-card-wrapper{
                  &:before{
                      background-color: white;
                      border-color: $highlightColor;
                      @include define-responsive-property("width" , 20px , 14px , 14px , 8px );
                      @include define-responsive-property("height" , 20px , 14px , 14px , 8px );
                      @include define-responsive-property("border-width" , 12px , 12px , 12px , 9px );
                      transform: translate( calc( #{$position} * ( -50% - 19px ) ) , 50% );
                      @media screen and ( min-width : 768px) {
                          transform: translate( $position * -50%  , 0 );
                      }
                  }
              }
          }
      }
        .td-generic-timeline__row__node {
          color: black;
          display: inline-block;
          @include addTimeLineNode();
        }
        .td-generic-timeline__row__card {
          &.td-generic-timeline__row__card--reverse {
            .td-generic-timeline__row__card__article {

              @include respond-to("md") {
                order: 2;
                padding-#{$start}: $cardsColumnsCenterPadding;
                padding-#{$end}: 12px;
              }
              @media screen and (max-width: 767px) {
                order: unset;
              }
            }
            .td-generic-timeline__row__card__image {
              @include respond-to("md") {
                padding-#{$end}: $cardsColumnsCenterPadding;
                padding-#{$start}: 12px;
              }
            }
          }
          .td-generic-timeline__row__card__article {
            color: $timelineColor;
            h1{
              @include gallery-title( 30px);
            }
            @include respond-to("md") {
              padding-#{$end}: $cardsColumnsCenterPadding;
            }
          }
          .td-generic-timeline__row__card__image {
            aspect-ratio: 1;
            @include respond-to("md") {
              padding-#{$start}: $cardsColumnsCenterPadding;
            }
          }
          @media screen and (max-width: 767px) {
            max-width: $mobileRowWidth;
            margin: auto;
          }
        }
      }
    }
  }
}

